"""In memory cache"""

from textwrap import dedent

from data_models import BaseAlert
from chanel_workers.logger import tgbot_logger


class Cache():
    """Class for storing sent alerts in RAM"""
    def __init__(self) -> None:
        """
        self.alerts is dict with alerts 
        structure is:
        {
            key: {
                "message_id": int,
                "entity": int
            }
            ...
        }
        where:
            key: key generated by 'generate_key' method
            message_id: alert message id in chanel
            entity: chanel id
        """
        self.alerts = {}

        """
        self.reverced_alerts is mirror dict for self.alerts
        structure is:
        {
            entity-message_id: key,
            ...
        }

        where:
            key: key generated by 'generate_key' method
            message_id: alert message id in chanel
            entity: chanel id
        """
        self.reverced_alerts = {}


    def generate_key(self, alert: BaseAlert, entity: int) -> str:
        """
        Generate cache key from alert and chat id
        args:
            alert: alert from which the key will be generated
            entity: chat id where the alert will be sent
        """
        if len(alert.labels.values()) > 0:
            labels = '-'.join(alert.labels.values())
            return f"{str(entity)}-{labels}-{alert.startsAt}"

        else:
            tgbot_logger.error(dedent("""\
                Failed to generate cache key.
                Its imposible with empty labels list in alert
                Original alert - %s"""),
                alert)
            raise AlertHasNotLabels(alert)


    def get_alerts(self) -> dict:
        """get alerts thats currently in active chat"""
        return self.alerts


    def get_cache_by_key(self, key: str) -> dict:
        """get alert cache by its cache key"""
        if key in self.alerts:
            return self.alerts.get(key)
        else:
            raise CacheKeyDoesNotExist(key)


    def get_keys_by_entity_messageids(self, entity: int, messsages_ids: list) -> list:
        """
        Get cache keys list by entity and message_ids
        args:
            entity: chat id
            messsages_ids: list of message ids
        """
        keys = []
        for message_id in messsages_ids:
            try:
                key = self.reverced_alerts.get(f"{entity}-{message_id}")
                keys.append(key)

            except KeyError:
                tgbot_logger.warning(dedent("""\
                    Cant get key by entity and message id.
                    Key does not exist in mirror dict.
                    Original key - %s"""),
                    f"{entity}-{message_id}")
                continue

        return keys

    def cache_alert(self, alert: BaseAlert, entity: int, message_id: str) -> None:
        """
        Caching sent alert with labels as key and entity and message id as value
        args:
            alert: Alert that was sent to chat
            entity: chat id where the alert will be sent
            message_id: Id of message with alert in chat
        """
        key = self.generate_key(alert, entity)
        if key not in self.alerts:
            self.alerts[key] = {
                "message_id": message_id,
                "entity": entity
            }
            tgbot_logger.debug(dedent("""\
                Alert was cahed with key - %s
                And chat id - %s
                """),
                key, entity)

            self.reverced_alerts[f"{entity}-{message_id}"] = key

        else:
            tgbot_logger.error(dedent("""\
                Failed to cache alert.
                From alert fields was genereate key, but its already exists in cache.
                Original alert - %s"""),
                alert)
            raise DuplicateCacheKey(alert)


    def delete_alert_by_key(self, key: str) -> None:
        """
        Delete alert from cache by key
        args:
            key: key of alert in cache
        """
        try:
            cache_alert = self.alerts.pop(key)
            tgbot_logger.debug(dedent("""\
                Alert was with key - %s
                Was delete from cache
                """),
                key)

            entity = cache_alert.get("entity")
            message_id = cache_alert.get("message_id")
            self.reverced_alerts.pop(f"{entity}-{message_id}")

        except KeyError:
            tgbot_logger.warning(dedent("""\
                Cant delete non exist key from cache.
                Original key - %s"""),
                key)


    def delete_alerts_by_key(self, keys: list) -> None:
        """
        Delete alerts from cache by list of keys
        args:
            keys: list of keys of alert in cache
        """
        for key in keys:
            self.delete_alert_by_key(key)


    def delete_alert(self, alert: BaseAlert, entity: int) -> None:
        """
        Delete alert from cache
        args:
            alert: Alert that will be delted from cache
            entity: chat id where the alert will be sent
        """
        key = self.generate_key(alert, entity)
        try:
            cache_alert = self.alerts.pop(key)
            tgbot_logger.debug(dedent("""\
                Alert was with key - %s
                Was delete from cache
                """),
                key)

            entity = cache_alert.get("entity")
            message_id = cache_alert.get("message_id")
            self.reverced_alerts.pop(f"{entity}-{message_id}")

        except KeyError:
            tgbot_logger.warning(dedent("""\
                Cant delete non exist key from cache.
                Original key - %s"""),
                key)


class AlertHasNotLabels(Exception):
    """
    Exception for cases when module cant generate cache key
    because alert has not labels
    args:
        alert: original alert
    """
    def __init__(self, alert: BaseAlert):
        self.alert = alert
        super().__init__(
            dedent(f"""Failed to generate cache key.
                Its imposible with empty labels list in alert
                Original alert is - {alert}""")
        )


class DuplicateCacheKey(Exception):
    """
    Exception when cache key already exists
    args:
        alert: original alert
    """
    def __init__(self, alert: BaseAlert):
        self.alert = alert
        super().__init__(
            dedent(f"""Failed to cache alert.
                From alert fields was genereate key, but its already exists in cache.
                Original alert is - {alert}""")
        )


class CacheKeyDoesNotExist(Exception):
    """
    Exception for case when requested cache key does not exist in cache
    args:
        key: the key that was requested from the cache
    """
    def __init__(self, key: str):
        self.key = key
        super().__init__(
            dedent(f"""Failed to retrive data from cache. Specified key does not exists.
                Key is - {key}""")
        )
